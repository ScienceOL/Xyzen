{
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",

  "[python]": {
    "editor.defaultFormatter": "ms-python.black-formatter",
    "editor.formatOnSave": true,

    "editor.codeActionsOnSave": {
      "source.organizeImports": "explicit",
      "source.unusedImports": "explicit"
    }
  },

  // ============================================================================
  // Python Language Server Configuration (Manual sync with service/pyproject.toml)
  // ============================================================================
  // ⚠️ Important: These settings must be manually synchronized with [tool.pyright] in service/pyproject.toml
  //
  // Why manual sync is needed?
  // - Workspace root is /Xyzen
  // - pyproject.toml is located in /Xyzen/service/ subdirectory
  // - Pylance cannot automatically read pyproject.toml from subdirectories
  //
  // How to keep in sync?
  // 1. After modifying [tool.pyright] in service/pyproject.toml
  // 2. Update corresponding python.analysis.* settings in this file
  // 3. Reload VS Code window (⇧⌘P -> Developer: Reload Window)
  //
  // How to verify it works?
  // - Run `cd service && uv run pyright .`
  // - Check if IDE shows the same errors
  "python.languageServer": "Pylance",

  // Type checking mode: corresponds to typeCheckingMode = "standard" in pyproject.toml
  "python.analysis.typeCheckingMode": "standard",

  // Paths to include in analysis
  "python.analysis.include": ["service"],

  // Exclude directories from type checking (corresponds to exclude in pyproject.toml)
  "python.analysis.exclude": [
    "**/__pycache__",
    "**/.pytest_cache",
    "**/migrations",
    "service/migrations",
    "**/.venv",
    "**/venv",
    "**/build",
    "**/dist",
    // Additional exclusions for non-Python project directories
    "web/**",
    "docker/**",
    "infra/**",
    "launch/**"
  ],

  // Python module search paths (corresponds to extraPaths in pyproject.toml)
  // Disable auto search to avoid using workspace root as import prefix (prevents "service.*")
  "python.analysis.autoSearchPaths": false,
  // Explicitly treat service as import root so completions use "app.*" instead of "service.app.*"
  "python.analysis.extraPaths": ["./service"],
  "python.analysis.autoImportCompletions": true,

  // Diagnostic mode: check only open files
  "python.analysis.diagnosticMode": "openFilesOnly",

  // ============================================================================
  // Diagnostic Severity Overrides (Synced with service/pyproject.toml)
  // ============================================================================
  // Note: The following strict mode settings are NOT supported in settings.json:
  // - strictListInference
  // - strictDictionaryInference
  // - strictSetInference
  // - strictParameterNoneValue
  // These are configured in service/pyproject.toml only
  // ============================================================================
  "python.analysis.diagnosticSeverityOverrides": {
    // Error level (error)
    "reportMissingImports": "error",
    "reportDuplicateImport": "error",
    "reportOptionalSubscript": "error",
    "reportOptionalMemberAccess": "error",
    "reportOptionalCall": "error",
    "reportOptionalIterable": "error",
    "reportOptionalContextManager": "error",
    "reportOptionalOperand": "error",
    "reportConstantRedefinition": "error",
    "reportIncompatibleMethodOverride": "error",
    "reportIncompatibleVariableOverride": "error",
    "reportInconsistentConstructor": "error",
    "reportOverlappingOverload": "error",
    "reportInvalidStringEscapeSequence": "error",
    "reportMissingParameterType": "error",
    "reportUnknownLambdaType": "error",

    // Warning level (warning)
    "reportUnusedImport": "warning",
    "reportUnusedClass": "warning",
    "reportUnusedFunction": "warning",
    "reportUnusedVariable": "warning",
    "reportPrivateUsage": "warning",
    "reportUninitializedInstanceVariable": "warning",
    "reportUnnecessaryIsInstance": "warning",
    "reportUnnecessaryCast": "warning",
    "reportUnnecessaryComparison": "warning",
    "reportUnnecessaryContains": "warning",
    "reportUnnecessaryTypeIgnoreComment": "warning",
    "reportTypeCommentUsage": "warning",
    "reportUnknownParameterType": "warning",
    "reportUnknownArgumentType": "warning",

    // Disabled items (none)
    "reportMissingTypeStubs": "none",
    "reportUntypedFunctionDecorator": "none",
    "reportUntypedClassDecorator": "none",
    "reportUntypedBaseClass": "none",
    "reportUnknownVariableType": "none",
    "reportUnknownMemberType": "none",
    "reportMissingSuperCall": "none",
    "reportCallInDefaultInitializer": "none",
    "reportImplicitStringConcatenation": "none"
  },

  "black-formatter.args": ["--line-length", "119"],

  "flake8.args": [
    "--max-line-length",
    "119",
    "--ignore",
    "F401 W503 F541 F841 E226"
  ],

  "todo-tree.highlights.defaultHighlight": {
    "icon": "alert",
    "type": "text",
    "foreground": "#9efff4",
    "opacity": 100,
    "iconColour": "#ffca56"
  },
  "todo-tree.highlights.customHighlight": {
    "TODO": {
      "icon": "star",
      "type": "text-and-comment",
      "foreground": "#FFD700",
      "background": "#FFD70020",
      "fontWeight": "600",
      "iconColour": "#FFD700",
      "gutterIcon": true,
      "borderRadius": "3px"
    },
    "FIXME": {
      "icon": "tools",
      "type": "tag-and-comment",
      "foreground": "#FF6B9D",
      "background": "#FF6B9D15",
      "fontWeight": "600",
      "iconColour": "#FF6B9D",
      "gutterIcon": true,
      "borderRadius": "3px"
    },
    "BUG": {
      "icon": "bug",
      "type": "tag-and-comment",
      "foreground": "#FF4757",
      "background": "#FF475720",
      "fontWeight": "700",
      "iconColour": "#FF4757",
      "gutterIcon": true,
      "borderRadius": "3px"
    },
    "CASE": {
      "icon": "briefcase",
      "type": "tag-and-comment",
      "foreground": "#A8E6CF",
      "background": "#A8E6CF18",
      "fontWeight": "600",
      "iconColour": "#A8E6CF",
      "gutterIcon": true,
      "borderRadius": "3px"
    },
    "END": {
      "icon": "check-circle",
      "type": "tag-and-comment",
      "foreground": "#7ED321",
      "background": "#7ED32115",
      "fontWeight": "600",
      "iconColour": "#7ED321",
      "gutterIcon": true,
      "borderRadius": "3px"
    },
    "EXPLAIN:": {
      "icon": "light-bulb",
      "type": "tag-and-comment",
      "foreground": "#74B9FF",
      "background": "#74B9FF18",
      "fontWeight": "500",
      "fontStyle": "italic",
      "iconColour": "#74B9FF",
      "gutterIcon": true,
      "borderRadius": "3px"
    },
    "NOTE": {
      "icon": "note",
      "type": "tag-and-comment",
      "foreground": "#B8A9FF",
      "background": "#B8A9FF15",
      "fontWeight": "500",
      "fontStyle": "italic",
      "iconColour": "#B8A9FF",
      "gutterIcon": true,
      "borderRadius": "3px"
    },
    "WRONG": {
      "icon": "x-circle",
      "type": "tag-and-comment",
      "foreground": "#FF7675",
      "background": "#FF767520",
      "fontWeight": "600",
      "iconColour": "#FF7675",
      "gutterIcon": true,
      "borderRadius": "3px"
    },
    "WARNING": {
      "icon": "alert",
      "type": "tag-and-comment",
      "foreground": "#FDCB6E",
      "background": "#FDCB6E18",
      "fontWeight": "600",
      "iconColour": "#FDCB6E",
      "gutterIcon": true,
      "borderRadius": "3px"
    }
  },
  "todo-tree.general.tags": [
    "BUG",
    "WARNING",
    "WRONG:",
    "FIXME",
    "TODO",
    "CASE",
    "END",
    "EXPLAIN:",
    "NOTE:",
    "[x]"
  ],

  "files.exclude": {
    "**/.mypy_cache": true,
    "**/.python-version": true
  }
}
