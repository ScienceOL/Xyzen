name: sciol-xyzen
services:
  network-service:
    image: registry.sciol.ac.cn/library/alpine:3.22
    ports:
      - '${WEB_PORT:-32233}:32233'
      - '${SERVICE_PORT:-48196}:48196'
      - '${POSTGRES_PORT:-5432}:5432'
      # - '${REDIS_PORT:-6379}:6379'
    command: tail -f /dev/null
    networks:
      - xyzen-network

  postgresql:
    image: registry.sciol.ac.cn/library/postgres:16.8-alpine
    pull_policy: if_not_present
    network_mode: 'service:network-service'
    restart: unless-stopped
    attach: false
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-postgres}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - db-data:/var/lib/postgresql/data

  # minio:
  #   image: registry.sciol.ac.cn/library/minio
  #   network_mode: 'service:network-service'
  #   attach: false
  #   volumes:
  #     - 's3_data:/etc/minio/data'
  #   environment:
  #     - 'MINIO_API_CORS_ALLOW_ORIGIN=*'
  #   restart: unless-stopped
  #   entrypoint: >
  #     /bin/sh -c "
  #       minio server /etc/minio/data --address ':9000' --console-address ':9001' &
  #       pid=$$!
  #       while ! curl -s http://localhost:9000/minio/health/live; do
  #         echo 'Waiting for MinIO to start...'
  #         sleep 1
  #       done
  #       sleep 5
  #       mc alias set myminio http://localhost:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin}
  #       echo 'Creating bucket ${AWS_STORAGE_BUCKET_NAME:-xyzen}...'
  #       mc mb myminio/${AWS_STORAGE_BUCKET_NAME:-xyzen}
  #       wait $$pid
  #     "

  redis:
    image: registry.sciol.ac.cn/library/redis:7.4.2-alpine
    network_mode: 'service:network-service'
    restart: unless-stopped
    attach: false
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 5

  # casdoor:
  #   image: registry.sciol.ac.cn/library/casdoor:v2.43.0
  #   entrypoint: /bin/sh -c './server --createDatabase=true'
  #   network_mode: 'service:network-service'
  #   depends_on:
  #     postgresql:
  #       condition: service_healthy
  #   healthcheck:
  #     test:
  #       [
  #         'CMD-SHELL',
  #         'wget -q --spider --proxy=off http://localhost:8000/api/health || exit 1',
  #       ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 10s
  #   environment:
  #     RUNNING_IN_DOCKER: 'true'
  #     driverName: 'postgres'
  #     dataSourceName: 'user=${DATABASE_USER:-postgres} password=${DATABASE_PASSWORD:-postgres} host=127.0.0.1 port=5432 sslmode=disable dbname=casdoor'
  #     runmode: 'dev'
  #   attach: false
  #   volumes:
  #     - ../infra/casdoor/init_data.json:/init_data.json

  service:
    image: registry.sciol.ac.cn/sciol/xyzen-service:latest
    pull_policy: if_not_present
    network_mode: 'service:network-service'
    restart: unless-stopped
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'python',
          '-c',
          "import urllib.request; urllib.request.urlopen('http://localhost:48196/xyzen/api/health', timeout=5)",
        ]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 10s

  web:
    image: registry.sciol.ac.cn/sciol/xyzen-web:latest
    pull_policy: if_not_present
    network_mode: 'service:network-service'
    restart: unless-stopped
    depends_on:
      service:
        condition: service_healthy

volumes:
  db-data:
    driver: local
  redis-data:
    driver: local

networks:
  xyzen-network:
    driver: bridge
