name: sciol-infra
services:
  network-service:
    image: registry.sciol.ac.cn/library/alpine:3.22
    ports:
      # - '${POSTGRES_PORT:-5432}:5432'
      - '${MINIO_PORT:-9000}:9000'
      - '${MINIO_CONSOLE_PORT:-9001}:9001'
      # - '${REDIS_PORT:-6379}:6379'
      # - '${ELASTICSEARCH_PORT:-9200}:9200'
      - '${CASDOOR_PORT:-8000}:8000'
      # - '${NACOS_PORT:-8848}:8848'
      # - '${NACOS_GRPC_PORT:-9848}:9848'
      # - '${NACOS_WEB_PORT:-7848}:8080'
    command: tail -f /dev/null
    networks:
      - sciol-network

  # nacos:
  #   image: nacos/nacos-server:v3.0.2
  #   container_name: sciol-nacos
  #   pull_policy: if_not_present
  #   network_mode: 'service:network-service'
  #   environment:
  #     - MODE=standalone
  #     - PREFER_HOST_MODE=hostname
  #     - NACOS_AUTH_ENABLE=false
  #     - NACOS_AUTH_TOKEN=012345678901234567890123456789012345678901234567890123456789
  #     - NACOS_AUTH_IDENTITY_KEY=serverIdentity
  #     - NACOS_AUTH_IDENTITY_VALUE=security
  #     # - NACOS_AUTH_ADMIN_USERNAME=nacos
  #     # - NACOS_AUTH_ADMIN_PASSWORD=nacos
  #   restart: always
  #   deploy:
  #     replicas: ${NACOS_REPLICAS:-1}
  #   volumes:
  #     - nacos-data:/home/nacos/data
  #     - ../infra/nacos/init.sh:/init.sh
  #   entrypoint: >
  #     /bin/sh -c "
  #       /home/nacos/bin/docker-startup.sh &
  #       pid=$$!

  #       # 等待 Nacos 启动
  #       until curl -i http://localhost:8080 > /dev/null 2>&1; do
  #         echo 'Waiting for Nacos to start...'
  #         sleep 2
  #       done

  #       # 执行初始化脚本
  #       chmod +x /init.sh
  #       /init.sh

  #       wait $$pid
  #     "
  #   healthcheck:
  #     test:
  #       ['CMD-SHELL', 'curl --fail --silent --max-time 3 http://localhost:8080']
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3
  #   attach: false

  postgresql:
    image: registry.sciol.ac.cn/library/postgres:16.8-alpine
    pull_policy: if_not_present
    network_mode: 'service:network-service'
    restart: always
    environment:
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    entrypoint: >
      /bin/sh -c "
        # 创建初始化脚本
        mkdir -p /docker-entrypoint-initdb.d
        echo 'CREATE DATABASE studio;' > /docker-entrypoint-initdb.d/init-databases.sql
        echo 'CREATE DATABASE casdoor;' >> /docker-entrypoint-initdb.d/init-databases.sql

        # 启动原始的 PostgreSQL 入口点
        exec /usr/local/bin/docker-entrypoint.sh postgres
      "
    volumes:
      - db-data:/var/lib/postgresql/data

  minio:
    image: registry.sciol.ac.cn/library/minio
    container_name: sciol-minio
    network_mode: 'service:network-service'
    volumes:
      - 's3_data:/etc/minio/data'
    environment:
      - 'MINIO_API_CORS_ALLOW_ORIGIN=*'
    restart: always
    deploy:
      replicas: ${MINIO_REPLICAS:-1}
    entrypoint: >
      /bin/sh -c "
        minio server /etc/minio/data --address ':9000' --console-address ':9001' &
        pid=$$!
        while ! curl -s http://localhost:9000/minio/health/live; do
          echo 'Waiting for MinIO to start...'
          sleep 1
        done
        sleep 5

        # 设置 MinIO 客户端别名
        mc alias set myminio http://localhost:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin}

        # 检查默认存储桶是否存在，不存在则创建
        if ! mc ls myminio/${AWS_STORAGE_BUCKET_NAME:-studio} > /dev/null 2>&1; then
          echo 'Creating bucket ${AWS_STORAGE_BUCKET_NAME:-studio}'
          mc mb myminio/${AWS_STORAGE_BUCKET_NAME:-studio}
        else
          echo 'Bucket ${AWS_STORAGE_BUCKET_NAME:-studio} already exists'
        fi

        # 检查 Casdoor 存储桶是否存在，不存在则创建
        if ! mc ls myminio/casdoor > /dev/null 2>&1; then
          echo 'Creating bucket casdoor'
          mc mb myminio/casdoor
        else
          echo 'Bucket casdoor already exists'
        fi

        mc anonymous set download myminio/casdoor

        # 检查 Lab 收集存储桶是否启用，启用则创建
        if [ "${LAB_MINIO_ENABLE:-false}" = "true" ]; then
          if ! mc ls myminio/${MINIO_BUCKET:-lab} > /dev/null 2>&1; then
            echo 'Creating lab bucket ${MINIO_BUCKET:-lab}'
            mc mb myminio/${MINIO_BUCKET:-lab}
          else
            echo 'Lab bucket ${MINIO_BUCKET:-lab} already exists'
          fi
        fi

        # 创建具有最高权限的访问密钥（如果不存在）
        if ! mc admin user info myminio ${AWS_ACCESS_KEY_ID:-pleasechangetoyourkey} > /dev/null 2>&1; then
          echo 'Creating access key with admin privileges'
          mc admin user add myminio ${AWS_ACCESS_KEY_ID:-pleasechangetoyourkey} ${AWS_SECRET_ACCESS_KEY:-pleasechangetoyoursecret}
          mc admin policy attach myminio readwrite --user ${AWS_ACCESS_KEY_ID:-pleasechangetoyourkey}
        else
          echo 'Access key ${AWS_ACCESS_KEY_ID:-pleasechangetoyourkey} already exists'
        fi

        wait $$pid
      "
    attach: false

  redis:
    image: registry.sciol.ac.cn/library/redis:7.4.2-alpine
    network_mode: 'service:network-service'
    restart: always
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      replicas: ${REDIS_REPLICAS:-1}

  casdoor:
    image: registry.sciol.ac.cn/library/casdoor:v2.43.0
    container_name: sciol-casdoor
    entrypoint: /bin/sh -c './server --createDatabase=true'
    network_mode: 'service:network-service'
    depends_on:
      postgresql:
        condition: service_healthy
      minio:
        condition: service_started
    environment:
      RUNNING_IN_DOCKER: 'true'
      driverName: 'postgres'
      dataSourceName: 'user=${DATABASE_USER:-postgres} password=${DATABASE_PASSWORD:-postgres} host=127.0.0.1 port=5432 sslmode=disable dbname=casdoor'
      runmode: 'dev'
    volumes:
      - ../infra/casdoor/init_data.json:/init_data.json
    attach: false

volumes:
  db-data:
    driver: local
  redis-data:
    driver: local
  s3_data:
    driver: local
  # nacos-data:
  #   driver: local

networks:
  sciol-network:
    driver: bridge
