name: Build and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to registry.sciol.ac.cn
        uses: docker/login-action@v3
        with:
          registry: registry.sciol.ac.cn
          username: ${{ secrets.SCIENCEOL_REGISTRY_USERNAME }}
          password: ${{ secrets.SCIENCEOL_REGISTRY_PASSWORD }}

      - name: Build and push Service Docker image
        run: |
          docker build service -t registry.sciol.ac.cn/sciol/xyzen-service:latest --push

      - name: Build and push Web Docker image
        run: |
          docker build web -t registry.sciol.ac.cn/sciol/xyzen-web:latest --push

      - name: Download Let's Encrypt CA
        run: curl -o ca.crt https://letsencrypt.org/certs/isrgrootx1.pem

      - name: Rolling update deployment
        run: |
          kubectl \
            --server=${{ secrets.SCIENCEOL_K8S_SERVER_URL }} \
            --token=${{ secrets.SCIENCEOL_K8S_ADMIN_TOKEN }} \
            --certificate-authority=ca.crt \
            rollout restart deployment xyzen -n sciol

      - name: Rolling update deployment
        run: |
          kubectl \
            --server=${{ secrets.SCIENCEOL_K8S_SERVER_URL }} \
            --token=${{ secrets.SCIENCEOL_K8S_ADMIN_TOKEN }} \
            --certificate-authority=ca.crt \
            rollout restart deployment xyzen-web -n sciol


      # - name: Calculate build duration
      #   if: always()
      #   id: build_duration
      #   shell: bash
      #   run: |
      #     # 确保 build_start 有值
      #     BUILD_START="${{ steps.build_setup.outputs.build_start }}"
      #     if [ -z "$BUILD_START" ]; then
      #       echo "Warning: build_start is empty, using current time as fallback"
      #       BUILD_START=$(date '+%Y-%m-%d %H:%M:%S')
      #     fi

      #     if [[ $(uname) == 'Darwin' ]]; then
      #       BUILD_START_SEC=$(date -j -f "%Y-%m-%d %H:%M:%S" "$BUILD_START" +%s)
      #     else
      #       BUILD_START_SEC=$(date -d "$BUILD_START" +%s)
      #     fi
      #     BUILD_END=$(date '+%Y-%m-%d %H:%M:%S')
      #     BUILD_END_SEC=$(date +%s)
      #     DURATION_SEC=$((BUILD_END_SEC - BUILD_START_SEC))

      #     # Format as hours:minutes:seconds
      #     HOURS=$((DURATION_SEC / 3600))
      #     MINUTES=$(((DURATION_SEC % 3600) / 60))
      #     SECONDS=$((DURATION_SEC % 60))

      #     DURATION="${HOURS}h ${MINUTES}m ${SECONDS}s"

      #     echo "build_end=$BUILD_END" >> $GITHUB_ENV
      #     echo "build_duration=$DURATION" >> $GITHUB_ENV

      # - name: Send build notification
      #   if: always()
      #   uses: ./.github/actions/email-notification
      #   with:
      #     status: ${{ job.status }}
      #     smtp_server: smtp.feishu.cn
      #     smtp_port: 465
      #     smtp_user: ${{ secrets.SMTP_USER }}
      #     smtp_pass: ${{ secrets.SMTP_PASS }}
      #     recipient: ${{ env.RECEIVER }}
      #     pr_number: ${{ github.event.pull_request.number }}
      #     pr_title: ${{ github.event.pull_request.title }}
      #     pr_url: ${{ github.event.pull_request.html_url }}
      #     head_ref: ${{ github.head_ref }}
      #     base_ref: ${{ github.base_ref }}
      #     repo: ${{ github.repository }}
      #     run_id: ${{ github.run_id }}
      #     build_start: ${{ steps.build_setup.outputs.build_start }}
      #     build_end: ${{ env.build_end }}
      #     build_duration: ${{ env.build_duration }}
      #     commit_author: ${{ steps.build_setup.outputs.commit_author }}
      #     commit_email: ${{ steps.build_setup.outputs.commit_email }}
      #     commit_message: ${{ steps.build_setup.outputs.commit_message }}
      #     commit_sha: ${{ steps.build_setup.outputs.commit_sha }}
      #     commit_sha_short: ${{ steps.build_setup.outputs.commit_sha_short }}
      #     commit_date: ${{ steps.build_setup.outputs.commit_date }}
      #     service_image: ${{ env.SERVICE_IMAGE }}
      #     protium_image: ${{ env.PROTIUM_IMAGE }}
