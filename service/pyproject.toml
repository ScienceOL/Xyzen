[project]
name = "service"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13, <3.14"
dependencies = [
    "alembic>=1.16.4",
    "anthropic>=0.67.0",
    "databases[postgresql,sqlite]>=0.9.0",
    "fastapi[standard]>=0.116.1",
    "fastmcp>=2.12.3",
    "google-genai>=1.38.0",
    "httpx>=0.28.1",
    "langchain>=1.0.2",
    "langchain-anthropic>=1.0.0",
    "langchain-google-genai>=3.0.0",
    "langchain-openai>=1.0.1",
    "llm-sandbox[docker,k8s]>=0.3.20",
    "mcp>=1.11.0",
    "openai>=1.98.0",
    "psycopg[binary,pool]>=3.2.9",
    "pydantic-graph>=0.4.10",
    "pydantic-settings>=2.10.1",
    "pyjwt[crypto]>=2.10.0",
    "requests>=2.32.4",
    "sqlmodel>=0.0.24",
    "types-pyjwt>=1.7.1",
    "types-requests>=2.32.4.20250611",
    "websockets>=13.0,<14.0",
]

[dependency-groups]
dev = [
    "pyright>=1.1.390",
    "pre-commit>=4.2.0",
]

[tool.black]
line-length = 119
target-version = ['py313']
include = '.*\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations/versions
)/
'''

[tool.isort]
profile = "black"
line_length = 119
multi_line_output = 3
include_trailing_comma = true
src_paths = ["."]

# Pyright/Pylance 类型检查配置 (用于 VS Code 和 pre-commit)
[tool.pyright]
include = ["."]
exclude = [
    "**/__pycache__",
    "**/.pytest_cache",
    "**/migrations",
    "migrations",
    ".venv",
    "build",
    "dist"
]
extraPaths = ["."]
pythonVersion = "3.13"
pythonPlatform = "All"

# 类型检查模式: "off" | "basic" | "standard" | "strict"
typeCheckingMode = "standard"

# 严格模式配置
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
strictParameterNoneValue = true

# 报告配置 - 错误级别
reportMissingImports = "error"
reportDuplicateImport = "error"
reportOptionalSubscript = "error"
reportOptionalMemberAccess = "error"
reportOptionalCall = "error"
reportOptionalIterable = "error"
reportOptionalContextManager = "error"
reportOptionalOperand = "error"
reportConstantRedefinition = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportInconsistentConstructor = "error"
reportOverlappingOverload = "error"
reportInvalidStringEscapeSequence = "error"

# 报告配置 - 警告级别
reportUnusedImport = "warning"
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportPrivateUsage = "warning"
reportUninitializedInstanceVariable = "warning"
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"

# 报告配置 - 禁用项
reportMissingTypeStubs = "none"
reportUntypedFunctionDecorator = "none"
reportUntypedClassDecorator = "none"
reportUntypedBaseClass = "none"
reportUnknownParameterType = "none"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownVariableType = "none"
reportUnknownMemberType = "none"
reportMissingSuperCall = "none"
reportMissingParameterType = "none"
reportCallInDefaultInitializer = "none"
reportImplicitStringConcatenation = "none"
