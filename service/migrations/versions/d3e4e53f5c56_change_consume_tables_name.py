"""change consume tables name

Revision ID: d3e4e53f5c56
Revises: 25b4116e5c65
Create Date: 2025-10-26 13:11:20.633559

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "d3e4e53f5c56"
down_revision: Union[str, Sequence[str], None] = "25b4116e5c65"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "consumerecord",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("biz_no", sa.Integer(), autoincrement=True, nullable=True),
        sa.Column("amount", sa.Integer(), nullable=False),
        sa.Column("auth_provider", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("sku_id", sa.Integer(), nullable=True),
        sa.Column("scene", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("session_id", sa.Uuid(), nullable=True),
        sa.Column("topic_id", sa.Uuid(), nullable=True),
        sa.Column("message_id", sa.Uuid(), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("consume_state", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("remote_error", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("remote_response", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_consumerecord_auth_provider"), "consumerecord", ["auth_provider"], unique=False)
    op.create_index(op.f("ix_consumerecord_biz_no"), "consumerecord", ["biz_no"], unique=True)
    op.create_index(op.f("ix_consumerecord_id"), "consumerecord", ["id"], unique=False)
    op.create_index(op.f("ix_consumerecord_user_id"), "consumerecord", ["user_id"], unique=False)
    op.create_table(
        "userconsumesummary",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("auth_provider", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("total_amount", sa.BigInteger(), nullable=False),
        sa.Column("total_count", sa.Integer(), nullable=False),
        sa.Column("success_count", sa.Integer(), nullable=False),
        sa.Column("failed_count", sa.Integer(), nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_userconsumesummary_auth_provider"), "userconsumesummary", ["auth_provider"], unique=False)
    op.create_index(op.f("ix_userconsumesummary_id"), "userconsumesummary", ["id"], unique=False)
    op.create_index(op.f("ix_userconsumesummary_user_id"), "userconsumesummary", ["user_id"], unique=True)
    op.drop_index(op.f("ix_consume_records_auth_provider"), table_name="consume_records")
    op.drop_index(op.f("ix_consume_records_biz_no"), table_name="consume_records")
    op.drop_index(op.f("ix_consume_records_id"), table_name="consume_records")
    op.drop_index(op.f("ix_consume_records_user_id"), table_name="consume_records")
    op.drop_table("consume_records")
    op.drop_table("checkpoint_migrations")
    op.drop_index(op.f("checkpoints_thread_id_idx"), table_name="checkpoints")
    op.drop_table("checkpoints")
    op.drop_index(op.f("ix_user_consume_summaries_auth_provider"), table_name="user_consume_summaries")
    op.drop_index(op.f("ix_user_consume_summaries_id"), table_name="user_consume_summaries")
    op.drop_index(op.f("ix_user_consume_summaries_user_id"), table_name="user_consume_summaries")
    op.drop_table("user_consume_summaries")
    op.drop_index(op.f("checkpoint_blobs_thread_id_idx"), table_name="checkpoint_blobs")
    op.drop_table("checkpoint_blobs")
    op.drop_table("store_migrations")
    op.drop_index(op.f("idx_store_expires_at"), table_name="store", postgresql_where="(expires_at IS NOT NULL)")
    op.drop_index(op.f("store_prefix_idx"), table_name="store", postgresql_ops={"prefix": "text_pattern_ops"})
    op.drop_table("store")
    op.drop_index(op.f("checkpoint_writes_thread_id_idx"), table_name="checkpoint_writes")
    op.drop_table("checkpoint_writes")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "checkpoint_writes",
        sa.Column("thread_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("checkpoint_ns", sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=False),
        sa.Column("checkpoint_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("task_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("idx", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("channel", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("type", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("blob", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column("task_path", sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint(
            "thread_id", "checkpoint_ns", "checkpoint_id", "task_id", "idx", name=op.f("checkpoint_writes_pkey")
        ),
    )
    op.create_index(op.f("checkpoint_writes_thread_id_idx"), "checkpoint_writes", ["thread_id"], unique=False)
    op.create_table(
        "store",
        sa.Column("prefix", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("key", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("value", postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("expires_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
        sa.Column("ttl_minutes", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("prefix", "key", name=op.f("store_pkey")),
    )
    op.create_index(
        op.f("store_prefix_idx"), "store", ["prefix"], unique=False, postgresql_ops={"prefix": "text_pattern_ops"}
    )
    op.create_index(
        op.f("idx_store_expires_at"),
        "store",
        ["expires_at"],
        unique=False,
        postgresql_where="(expires_at IS NOT NULL)",
    )
    op.create_table(
        "store_migrations",
        sa.Column("v", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("v", name=op.f("store_migrations_pkey")),
    )
    op.create_table(
        "checkpoint_blobs",
        sa.Column("thread_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("checkpoint_ns", sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=False),
        sa.Column("channel", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("version", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("type", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("blob", postgresql.BYTEA(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint(
            "thread_id", "checkpoint_ns", "channel", "version", name=op.f("checkpoint_blobs_pkey")
        ),
    )
    op.create_index(op.f("checkpoint_blobs_thread_id_idx"), "checkpoint_blobs", ["thread_id"], unique=False)
    op.create_table(
        "user_consume_summaries",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("auth_provider", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("total_amount", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("total_count", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("success_count", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("failed_count", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("user_consume_summaries_pkey")),
    )
    op.create_index(op.f("ix_user_consume_summaries_user_id"), "user_consume_summaries", ["user_id"], unique=True)
    op.create_index(op.f("ix_user_consume_summaries_id"), "user_consume_summaries", ["id"], unique=False)
    op.create_index(
        op.f("ix_user_consume_summaries_auth_provider"), "user_consume_summaries", ["auth_provider"], unique=False
    )
    op.create_table(
        "checkpoints",
        sa.Column("thread_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("checkpoint_ns", sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=False),
        sa.Column("checkpoint_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("parent_checkpoint_id", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("type", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("checkpoint", postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
        sa.Column(
            "metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("thread_id", "checkpoint_ns", "checkpoint_id", name=op.f("checkpoints_pkey")),
    )
    op.create_index(op.f("checkpoints_thread_id_idx"), "checkpoints", ["thread_id"], unique=False)
    op.create_table(
        "checkpoint_migrations",
        sa.Column("v", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("v", name=op.f("checkpoint_migrations_pkey")),
    )
    op.create_table(
        "consume_records",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("biz_no", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("amount", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("auth_provider", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("sku_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("scene", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("session_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("topic_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("message_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("consume_state", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("remote_error", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("remote_response", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("consume_records_pkey")),
    )
    op.create_index(op.f("ix_consume_records_user_id"), "consume_records", ["user_id"], unique=False)
    op.create_index(op.f("ix_consume_records_id"), "consume_records", ["id"], unique=False)
    op.create_index(op.f("ix_consume_records_biz_no"), "consume_records", ["biz_no"], unique=True)
    op.create_index(op.f("ix_consume_records_auth_provider"), "consume_records", ["auth_provider"], unique=False)
    op.drop_index(op.f("ix_userconsumesummary_user_id"), table_name="userconsumesummary")
    op.drop_index(op.f("ix_userconsumesummary_id"), table_name="userconsumesummary")
    op.drop_index(op.f("ix_userconsumesummary_auth_provider"), table_name="userconsumesummary")
    op.drop_table("userconsumesummary")
    op.drop_index(op.f("ix_consumerecord_user_id"), table_name="consumerecord")
    op.drop_index(op.f("ix_consumerecord_id"), table_name="consumerecord")
    op.drop_index(op.f("ix_consumerecord_biz_no"), table_name="consumerecord")
    op.drop_index(op.f("ix_consumerecord_auth_provider"), table_name="consumerecord")
    op.drop_table("consumerecord")
    # ### end Alembic commands ###
